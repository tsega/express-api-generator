// Load Module Dependencies.
var {{modelName}} = require('../models/{{modelNameToLower}}');
var population = [
{{relatedModels}}
];


/**
 * create a new {{modelNameToLower}}.
 *
 * @desc  creates a new {{modelNameToLower}} and saves it in the database
 *
 * @param {Object}   {{modelNameToLower}}Data  Data for the {{modelName}} to create
 * @param {Function} cb     Callback for once saving is complete
 */
exports.create = function create({{modelNameToLower}}Data, cb) {
    console.log('creating a new {{modelName}}');
    // Create {{modelName}}
    {{modelName}}.create({{modelNameToLower}}Data, function create{{modelName}}(err, {{modelNameToLower}}) {
        if (err) {
            return cb(err);
        }

        cb(null, {{modelNameToLower}});
    });
};


/**
 * remove a {{modelNameToLower}}
 *
 * @desc  delete data of the {{modelNameToLower}} with the given id
 *
 * @param {Object}  query   Query Object
 * @param {Function} cb Callback for once delete is complete
 */
exports.remove = function remove(query, cb) {
    console.log('deleting {{modelNameToLower}}: ', query);
    {{modelName}}
        .findOneAndRemove(query, function delete{{modelName}}(err, {{modelNameToLower}}) {
            if (err) {
                return cb(err);
            }

            cb(null, {{modelNameToLower}});
        });
};


/**
 * update a {{modelNameToLower}}
 *
 * @desc  update data of the {{modelNameToLower}} with the given id
 *
 * @param {Object} query Query object
 * @param {Object} updates  Update data
 * @param {Function} cb Callback for once update is complete
 */
exports.update = function update(query, updates, cb) {
    console.log('updating {{modelNameToLower}}: ', query);

    {{modelName}}
        .findOneAndUpdate(query, { $set: updates }, {new: true}) // option to return the new document
        .populate(population)
        .exec(function update{{modelName}}(err, {{modelNameToLower}}) {
            if (err) {
                return cb(err);
            }

            cb(null, {{modelNameToLower}} || {});
        });
};


/**
 * get a {{modelNameToLower}}.
 *
 * @desc get a {{modelNameToLower}} with the given id from db
 *
 * @param {Object} query Query Object
 * @param {Function} cb Callback for once fetch is complete
 */
exports.get = function get(query, cb) {
    console.log('getting {{modelNameToLower}} ', query);
    {{modelName}}
        .findOne(query)
        .populate(population)
        .exec(function (err, {{modelNameToLower}}) {
            if (err) {
                return cb(err);
            }

            cb(null, {{modelNameToLower}} || {});
        });
};


/**
 * search the collection of {{modelNamePluralToLower}}
 *
 * @desc get a collection of {{modelNamePluralToLower}} from db
 *
 * @param {Object} query Query Object
 * @param {Function} cb Callback for once fetch is complete
 */
exports.search = function search(options, cb) {
    console.log('Searching a collection of {{modelNamePluralToLower}}');
    {{modelName}}.find(options.filter, options.fields)
        .populate(population)
        .sort(options.sort)
        .limit(options.limit)
        .skip(options.limit * (options.page - 1))
        .exec(function search{{modelNamePlural}}(err, {{modelNamePluralToLower}}) {
            if (err) {
                return cb(err);
            }

            cb(null, {{modelNamePluralToLower}});
        });
};

/**
 * count
 *
 * @desc get the total or filtered count of {{modelNamePluralToLower}} in the collection.
 *
 * @param {Function} cb Callback for once fetch is complete
 */
exports.count = function count(filter, cb) {
  {{modelName}}.countDocuments(filter, function (err, count) {
      if (err) {
        return cb(err);
      }

      cb(null, count);
    });
};
